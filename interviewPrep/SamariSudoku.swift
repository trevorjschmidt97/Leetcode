var board = [
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
]

/// -1 is you can't touch
/// 0 is you need to update
/// 1 - 9 is solved
func solveSamariSudoku(_ board: inout [[Int]]) {
    guard board.count == 33 && board[0].count == 33 else { return }
    
    func isValid(_ r: Int, _ c: Int, _ num: Int) -> Bool {
        
        let r1 = (r / 3) * 3
        let c1 = (c / 3) * 3
        
        // check 3x3 box that it is already in
        for i in 0..<3 {
            for j in 0..<3 {
                if board[i][j] == num { return false }
            }
        }
        
        func check(_ sub: Int) -> Bool {
            var r2 = 0
            var c2 = 0
            switch sub {
            case 0:
                r2 = 0
                c2 = 12
            case 1:
                r2 = 6
                c2 = 6
            case 2:
                r2 = 6
                c2 = 18
            case 3:
                r2 = 12
                c2 = 0
            case 4:
                r2 = 12
                c2 = 12
            case 5:
                r2 = 0
                c2 = 24
            case 6:
                r2 = 18
                c2 = 6
            case 7:
                r2 = 18
                c2 = 18
            case 8:
                r2 = 24
                c2 = 12
            default:
                break
            }
            
            for r3 in 0..<9 {
                for c3 in 0..<9 {
                    if board[r2 + r3][c] == num { return false }
                    if board[r][c2 + c3] == num { return false }
                }
            }
            
            return true
        }
        
        if r1 <= 1 {
            if !check(0) { return false }
        }
        
        if r1 == 2 {
            if 2 <= c1 && c1 <= 4 {
                if !check(1) { return false }// Check 1
            }
            if 4 <= c1 && c1 <= 6 {
                if !check(0) { return false }// Check 0
            }
            if 6 <= c1 && c1 <= 8 {
                if !check(2) { return false }// Check 2
            }
        }
        
        if r1 == 3 {
            if 2 <= c1 && c1 <= 4 {
                if !check(1) { return false }// check 1
            }
            if 6 <= c1 && c1 <= 8 {
                if !check(2) { return false }// check 2
            }
        }
        
        if r1 == 4 {
            if 0 <= c1 && c1 <= 2 {
                if !check(3) { return false }// 3
            }
            if 2 <= c1 && c1 <= 4 {
                if !check(1) { return false }// 1
            }
            if 4 <= c1 && c1 <= 6 {
                if !check(4) { return false }// 4
            }
            if 6 <= c1 && c1 <= 8 {
                if !check(2) { return false }// 2
            }
            if 8 <= c1 && c1 <= 10 {
                if !check(5) { return false }// 5
            }
        }
        
        if r1 == 5 {
            if 0 <= c1 && c1 <= 2 {
                if !check(3) { return false }// 3
            }
            if 4 <= c1 && c1 <= 6 {
                if !check(4) { return false }// 4
            }
            if 8 <= c1 && c1 <= 10 {
                if !check(5) { return false }// 5
            }
        }
        
        if r1 == 6 {
            if 0 <= c1 && c1 <= 2 {
                if !check(3) { return false }// 3
            }
            if 2 <= c1 && c1 <= 4 {
                if !check(6) { return false }// 6
            }
            if 4 <= c1 && c1 <= 6 {
                if !check(4) { return false }// 4
            }
            if 6 <= c1 && c1 <= 8 {
                if !check(7) { return false }// 7
            }
            if 8 <= c1 && c1 <= 10 {
                if !check(5) { return false }// 5
            }
        }
        
        if r1 == 7 {
            if 2 <= c1 && c1 <= 4 {
                if !check(6) { return false }// 6
            }
            if 6 <= c1 && c1 <= 8 {
                if !check(7) { return false }// 7
            }
        }
        
        if r1 == 8 {
            if 2 <= c1 && c1 <= 4 {
                if !check(1) { return false }// 1
            }
            if 4 <= c1 && c1 <= 6 {
                if !check(8) { return false }// 8
            }
            if 6 <= c1 && c1 <= 8 {
                if !check(7) { return false }// 7
            }
        }
        
        if r1 >= 9 {
            if !check(8) { return false }// check 8
        }
        
        return true
    }
    
    @discardableResult
    func dfs() -> Bool {
        for r in 0..<board.count {
            for c in 0..<board[r].count where board[r][c] == 0 {
                for num in 1...9 where isValid(r, c, num) {
                    board[r][c] = num
                    if dfs() { return true }
                    else { board[r][c] = 0 }
                }
                return false
            }
        }
        return true
    }

    dfs()
}

solveSamariSudoku(&board)
for row in board {
    for grid in row {
        print(grid == -1 ? "." : "\(grid)", terminator: ", ")
    }
}
