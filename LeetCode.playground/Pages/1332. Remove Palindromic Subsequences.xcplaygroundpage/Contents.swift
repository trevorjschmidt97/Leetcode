//: [Previous](@previous)

import Foundation
import UIKit
import XCTest

// What did we learn?
// There are two things that make this easy.
// 1. We are removing subsequences, not substrings. This means that the order does not matter.
// 2. The input string only includes the chars "a" and "b"
// Because of that, if the string is already a palindrome, then just return 1
// Else, we can remove all "a"'s first, then all "b"'s, so just return 2
// Also... string.reversed() returns a ReversedCollection<String>, we need to cast to String to use it

class Solution {
    
    /// You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
    /// Return the minimum number of steps to make the given string empty.
    /// A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order.
    /// Note that a subsequence does not necessarily need to be contiguous.
    /// A string is called palindrome if is one that reads the same backward as well as forward.
    func removePalindromeSub(_ s: String) -> Int {
        return s == String(s.reversed()) ? 1 : 2
    }
}


class SolutionTests: XCTestCase {
//    Example 1:
//    Input: s = "ababa"
//    Output: 1
//    Explanation: s is already a palindrome, so its entirety can be removed in a single step.
    func testRemovePalindromeSub1() {
        XCTAssertEqual(Solution().removePalindromeSub("ababa"), 1)
    }
    
//    Example 2:
//    Input: s = "abb"
//    Output: 2
//    Explanation: "abb" -> "bb" -> "".
//    Remove palindromic subsequence "a" then "bb".
    func testRemovePalindromeSub2() {
        XCTAssertEqual(Solution().removePalindromeSub("abb"), 2)
    }
    
//    Example 3:
//    Input: s = "baabb"
//    Output: 2
//    Explanation: "baabb" -> "b" -> "".
//    Remove palindromic subsequence "baab" then "b".
    func testRemovePalindromeSub3() {
        XCTAssertEqual(Solution().removePalindromeSub("baabb"), 2)
    }
}


SolutionTests.defaultTestSuite.run()


//: [Next](@next)
